decide schema design, change all to text
design first page

Here's how PKCS7 padding works:

Padding Process: If the length of the plaintext data is not a multiple of the block size, PKCS7 padding adds bytes to the end of the plaintext to make it a multiple of the block size. The value of each padding byte is set to the number of padding bytes added.For example, if the block size is 8 bytes and the plaintext is 10 bytes long, PKCS7 padding would add 6 bytes, each with a value of 6.
Padding Removal: During decryption, the receiver removes the padding bytes based on their values. The receiver knows how many padding bytes were added to the plaintext and can use this information to remove the padding.For example, if the last byte of the decrypted data has a value of 6, the receiver knows that 6 padding bytes were added, so it removes these 6 bytes to obtain the original plaintext. 


ipher Block Chaining (CBC) mode is a widely used method of encrypting plaintext messages with block ciphers, such as the Advanced Encryption Standard (AES). In CBC mode, each plaintext block is combined with the ciphertext of the previous block before encryption. This process introduces a significant level of diffusion and confusion into the encryption process, enhancing security by mitigating patterns in the plaintext that may exist across blocks.

The encryption process in CBC mode involves the following steps:

Initialization Vector (IV): CBC mode requires the use of an Initialization Vector (IV), which is a random value that is unique for each encryption operation. The IV is XORed with the first plaintext block before encryption to introduce randomness and prevent identical plaintext blocks from producing the same ciphertext.
Block Encryption: Each plaintext block, after XORing with the ciphertext of the previous block (or the IV in the case of the first block), is encrypted using the chosen block cipher algorithm, such as AES. The resulting ciphertext block is then used as the input for the encryption of the next plaintext block.
Chaining: The ciphertext of each block is chained with the plaintext of the subsequent block, creating a cascade effect that ensures each ciphertext block is dependent on all preceding plaintext blocks.
Decryption in CBC mode follows a similar process but in reverse. Each ciphertext block is decrypted using the block cipher algorithm, and the result is XORed with the ciphertext of the previous block to obtain the plaintext. The IV is used with the first ciphertext block to recover the initial plaintext block.

While CBC mode offers strong security properties and is resistant to many cryptographic attacks, it does have some drawbacks. Notably, CBC mode encryption cannot be parallelized, as each block's encryption depends on the previous block's ciphertext. Additionally, CBC mode requires careful management of the IV to prevent cryptographic weaknesses, such as IV reuse leading to vulnerabilities like the CBC padding oracle attack. Overall, CBC mode remains a widely used and trusted encryption mode in modern cryptographic systems, particularly when combined with appropriate padding schemes and IV management practices.

cipher: This variable represents an AES cipher object that we previously created using the Cipher class from the cryptography.hazmat.primitives.ciphers module. We initialized this object with the AES algorithm and CBC mode.
encryptor(): This method is called on the cipher object to create an encryptor object. The encryptor object is responsible for performing the actual encryption of plaintext data.
By calling cipher.encryptor(), we're creating an encryptor object that is configured to encrypt data using the AES cipher in CBC mode with the parameters we specified earlier (such as the key and IV). We'll use this encryptor object to encrypt plaintext data block by block.


encryptor: This variable represents an encryptor object that we created earlier. The encryptor object is responsible for performing the encryption operation using the AES cipher in CBC mode.
finalize(): This method is called on the encryptor object to finalize the encryption process and retrieve the final ciphertext block. After calling finalize(), the encryptor object finishes its encryption operation and no more data can be encrypted using it.
In the context of the code provided, encryptor.finalize() is used to obtain the final ciphertext block after encrypting the padded plaintext message block by block. Once all plaintext blocks have been encrypted, encryptor.finalize() is called to retrieve the final ciphertext block, which is then concatenated with the ciphertext blocks obtained from previous iterations to obtain the complete ciphertext message.

b64encode(iv): This part of the expression encodes the IV (Initialization Vector) as a Base64 string using the b64encode function from the base64 module. Base64 encoding is a method of representing binary data (in this case, the IV) using printable ASCII characters. It's commonly used for encoding binary data so that it can be safely transmitted over text-based protocols or stored in text-based formats.
.decode('utf-8'): After encoding the IV as a Base64 string, the .decode('utf-8') part of the expression decodes the Base64 string into a UTF-8 string. This step is necessary because the result of b64encode(iv) is a bytes-like object, and we want to convert it to a human-readable string. UTF-8 is a widely used character encoding that can represent most characters in the Unicode character set.
Putting it all together, b64encode(iv).decode('utf-8') takes the IV, encodes it as a Base64 string, and then decodes it into a UTF-8 string. This is commonly done when dealing with binary data that needs to be represented as strings, such as when working with cryptographic operations where data needs to be transmitted or stored in a human-readable format.